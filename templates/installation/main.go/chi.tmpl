{{define "project"}}
package main

import (
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strings"

	_ "github.com/GoAdminGroup/go-admin/adapter/chi"                 // web framework adapter
	_ "github.com/GoAdminGroup/go-admin/modules/db/drivers/{{.DriverModule}}"  // sql driver
	_ "github.com/GoAdminGroup/themes/{{.ThemePath}}"                        // ui theme

	"github.com/GoAdminGroup/go-admin/engine"
	"github.com/GoAdminGroup/go-admin/template"
	"github.com/GoAdminGroup/go-admin/template/chartjs"
	"github.com/go-chi/chi"

	"{{.Module}}/pages"
	"{{.Module}}/tables"
	{{if ne .Orm ""}}"{{.Module}}/models"{{end}}
)

func main() {
	startServer()
}

func startServer() {
	r := chi.NewRouter()

	template.AddComp(chartjs.NewChart())

	eng := engine.Default()

	if err := eng.AddConfigFromYAML("./config.yml").
		AddGenerators(tables.Generators).
		Use(r); err != nil {
		panic(err)
	}

	eng.HTML("GET", "/{{.Prefix}}", pages.GetDashBoard)
	eng.HTMLFile("GET", "/{{.Prefix}}/hello", "./html/hello.tmpl", map[string]interface{}{
		"msg": "Hello world",
	})

	{{if ne .Orm ""}}models.Init(eng.{{title .Driver}}Connection()){{end}}

	workDir, _ := os.Getwd()
	filesDir := filepath.Join(workDir, "uploads")
	fileServer(r, "/uploads", http.Dir(filesDir))

	go func() {
		_ = http.ListenAndServe(":{{.Port}}", r)
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	log.Print("closing database connection")
	eng.{{title .Driver}}Connection().Close()
}


// fileServer conveniently sets up a http.FileServer handler to serve
// static files from a http.FileSystem.
func fileServer(r chi.Router, path string, root http.FileSystem) {
	if strings.ContainsAny(path, "{}*") {
		panic("FileServer does not permit URL parameters.")
	}

	fs := http.StripPrefix(path, http.FileServer(root))

	if path != "/" && path[len(path)-1] != '/' {
		r.Get(path, http.RedirectHandler(path+"/", 301).ServeHTTP)
		path += "/"
	}
	path += "*"

	r.Get(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fs.ServeHTTP(w, r)
	}))
}
{{end}}